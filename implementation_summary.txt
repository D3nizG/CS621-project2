Core Framework Classes

DiffServ Base Class: Inherits from ns-3::Queue and provides the foundation for classification and scheduling
TrafficClass: Defines queue characteristics (priority, weight, filters, etc.)
Filter: Collection of filter elements combined with AND logic
FilterElement: Base class for packet matching conditions
Seven FilterElement Subclasses:

Source/Destination IP address
Source/Destination port
Protocol number
Type of Service field
Packet number



QoS Mechanisms

SPQ (Strict Priority Queuing): Always serves highest priority queue with packets
DRR (Deficit Round Robin): Serves queues based on assigned quantum values in a 3:2:1 ratio

Extra Credit Component

Cisco 3750 CLI Parser: Parses Cisco IOS commands to configure SPQ

Supports commands like mls qos, priority-queue out, mls qos trust dscp
Maps DSCP values to queue priorities



Simulation & Validation

3-Node Topology: Setup with 4Mbps and 1Mbps links
SPQ Validation: Two apps with different priorities, high priority preempts low
DRR Validation: Three apps with 3:2:1 weights sharing bandwidth proportionally
Throughput Plotting: Generate throughput vs. time plots for visualization

Build System & Documentation

Makefile: For compiling and running simulations
Configuration Files: For SPQ, DRR, and Cisco-style configuration
README: With usage instructions and examples
Final Report Outline: Following the ACM template

Implementation Details
Filter Element Implementation
The FilterElement classes provide a flexible way to classify packets based on various header fields:

SourceIpAddress/DestIpAddress: Match packets based on source or destination IP address by inspecting the IPv4 header.
SourcePort/DestPort: Extract the TCP or UDP header from packets and match based on port numbers.
ProtocolNumber: Match packets based on the protocol field in the IP header (e.g., TCP=6, UDP=17).
TosField: Examine the Type of Service field in the IP header for DiffServ Code Point (DSCP) matching.
PacketNumber: Match packets based on their sequence number, useful for testing and debugging.

The Filter class combines multiple FilterElements using logical AND, meaning a packet matches the filter only if it satisfies all filter elements. Multiple filters can be added to a TrafficClass, and a packet matches a traffic class if it matches any of its filters (logical OR).
SPQ (Strict Priority Queuing) Implementation
The SPQ implementation follows a strict priority scheduling discipline:

Queue priority is defined by an integer value (lower value = higher priority)
The scheduler always serves the non-empty queue with the highest priority (lowest priority value)
Lower-priority queues only get serviced when all higher-priority queues are empty
This ensures that high-priority traffic always gets served first, but can also lead to starvation of lower-priority traffic

DRR (Deficit Round Robin) Implementation
The DRR scheduler implements a fair queuing algorithm:

Each queue has a quantum value proportional to its desired share of bandwidth
A deficit counter tracks how many bytes each queue can transmit in a round
In each round, the deficit counter is incremented by the quantum value
A packet is transmitted only if its size is less than or equal to the deficit counter
After transmission, the deficit counter is decreased by the packet size
If a queue cannot send a packet in its turn, its deficit counter is preserved for the next round
This ensures fair bandwidth allocation based on the quantum values

Cisco 3750 CLI Parser
The Cisco parser implements a subset of Cisco IOS commands for configuring QoS:

mls qos: Enables QoS globally
interface <interface_name>: Selects an interface for configuration
priority-queue out: Enables strict priority queuing on the interface
mls qos trust dscp: Configures the port to trust DSCP values
mls qos map dscp-queue <dscp_values> to <queue>: Maps DSCP values to queues

The parser reads a configuration file with Cisco IOS commands and configures the SPQ scheduler accordingly, mapping DSCP values to priority levels.
Validation Scenarios

SPQ Validation:

Two bulk data transfer applications with different priorities
Lower priority app starts first and uses all available bandwidth
When higher priority app starts, it preempts the lower priority app
When higher priority app stops, lower priority app regains the bandwidth
This demonstrates the preemptive nature of strict priority scheduling


DRR Validation:

Three bulk data transfer applications with quantum values in a 3:2:1 ratio
All three applications start simultaneously
Bandwidth is shared proportionally according to the quantum values
This demonstrates the fair bandwidth allocation of DRR



Future Improvements
Our implementation could be enhanced in several ways:

More QoS Mechanisms: Implement additional scheduling disciplines like Weighted Fair Queuing (WFQ), Class-Based Weighted Fair Queuing (CBWFQ), or Modified Deficit Round Robin (MDRR).
Advanced Packet Classification: Implement a more efficient classification algorithm, such as hierarchical tries or bit vector algorithms, for faster packet classification.
Dynamic Configuration: Allow for runtime reconfiguration of queues and filters.
Advanced Filtering Capabilities: Support for more complex matching criteria, including packet payload inspection and regular expressions.
Enhanced Cisco Parser: Expand the Cisco parser to support more QoS-related commands and configuration options.
IPv6 Support: Add support for IPv6 headers and extend the FilterElement classes accordingly.
Performance Optimization: Optimize the implementation for better performance with large numbers of queues and filters.
Integration with Traffic Control Layer: Better integration with ns-3's traffic control framework.